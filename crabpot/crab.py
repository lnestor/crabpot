from crabpot.constants import CRABPOT_DIR
from crabpot.exceptions import CrabpotError
import os
from jinja2 import Environment, meta, Template
from pathlib import Path

class Crab:
    def __init__(self, name, pot):
        self.name = name
        self.pot = pot
        self.tags = {}
        self.substitutions = {}
        self.templates = []

        self.status = "unsubmitted"
        self.status_counts = {}

    def add_template_file(self, filename, is_crab_config=False):
        self.templates.append((filename, is_crab_config))

    def generate(self):
        os.makedirs(self._get_dir(), exist_ok=True)

        if self._get_crab_config_count() != 1:
            raise CrabpotError()

        if self._has_missing_substitutions():
            raise CrabpotError()

        template_subs = {self._get_template_basename(fname): self._get_rendered_fname(fname) for (fname, _) in self.templates}
        for (filename, is_crab_config) in self.templates:
            with open(filename) as f:
                template = Template(f.read())

            output = template.render(**self.substitutions, **template_subs)

            if is_crab_config:
                output += self._get_crab_config_appendix()

            with open(self._get_rendered_fname(filename), "w") as f:
                f.write(output)

    def get_base_crab_dir(self):
        return f"{self._get_dir()}/crab_dir"

    def get_crab_request_dir(self):
        return str(next(Path(f"{self._get_dir()}/crab_dir").iterdir()))

    def get_crab_config(self):
        for (template, is_crab_config) in self.templates:
            if is_crab_config:
                return self._get_rendered_fname(template)

    def get_generated_files(self):
        return [self._get_rendered_fname(t) for (t, _) in self.templates]
    
    def get_log_file(self):
        return f"{self._get_dir()}/crabpot.log"

    def _get_template_basename(self, fname):
        return os.path.basename(fname).split(".")[0]

    def _get_rendered_fname(self, fname):
        return f"{self._get_dir()}/{self._get_template_basename(fname)}.py"

    def _get_dir(self):
        return f"{CRABPOT_DIR}/{self.pot.name}/{self.name}"

    def _get_crab_config_count(self):
        count = 0
        for (template, is_crab_config) in self.templates:
            if is_crab_config:
                count += 1

        return count

    def _has_missing_substitutions(self):
        template_subs = {self._get_template_basename(fname): self._get_rendered_fname(fname) for (fname, _) in self.templates}
        subs = {**self.substitutions, **template_subs}
        for (filename, _) in self.templates:
            env = Environment()
            with open(filename) as f:
                template = env.parse(f.read())

            required_vars = meta.find_undeclared_variables(template)

            for var in required_vars:
                if var not in subs:
                    return True

        return False

    def _get_crab_config_appendix(self):
        return f"""
#############################
# Auto-Generated by Crabpot #
#############################

# Save all CRAB files inside the managed directory
config.General.workArea = "{self.get_base_crab_dir()}"
"""

